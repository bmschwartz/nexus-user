scalar DateTime

extend type Query {
  # User
  me: User

  userIdByEmail(input: UserIdByEmailInput!): ID
}

extend type Mutation {
  # User
  loginUser(input: LoginUserInput!): AuthPayload!
  signupUser(input: SignupUserInput!): AuthPayload!
}

########################
#  User
########################
type User @key(fields: "id") {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  username: String!
  admin: Boolean!
}

input LoginUserInput {
  email: String!
  password: String!
}

input SignupUserInput {
  email: String!
  username: String!
  password: String!
}

type AuthPayload {
  token: String!
}

input UserIdByEmailInput {
  email: String!
}
